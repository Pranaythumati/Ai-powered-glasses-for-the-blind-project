import cv2
import numpy as np
from picamera2 import Picamera2

# Initialize Picamera2
picam2 = Picamera2()
camera_config = picam2.create_still_configuration(main={"size": (320, 240)})  # Reduce resolution
picam2.configure(camera_config)
picam2.start()

net = cv2.dnn.readNet('yolov3-tiny.weights', 'yolov3-tiny.cfg')  # Use YOLOv3-tiny

classes = []
with open("coco.names", "r") as f:
    classes = f.read().splitlines()

try:
    while True:
        frame = picam2.capture_array()
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)  # Convert RGB to BGR

        height, width, _ = frame.shape

        # Create a 320x320 blob from the frame (smaller size for faster processing)
        blob = cv2.dnn.blobFromImage(frame, 1 / 255.0, (320, 320), swapRB=True, crop=False)
        net.setInput(blob)
        output_layers_names = net.getUnconnectedOutLayersNames()
        layerOutputs = net.forward(output_layers_names)
        boxes = []
        confidences = []
        class_ids = []

        for output in layerOutputs:
            for detection in output:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.5:
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    w = int(detection[2] * width)
                    h = int(detection[3] * height)

                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)

                    boxes.append([x, y, w, h])
                    confidences.append((float(confidence)))
                    class_ids.append(class_id)

        indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
        font = cv2.FONT_HERSHEY_PLAIN
        colors = np.random.uniform(0, 255, size=(len(boxes), 3))

        if len(indexes) > 0:  # Check if indexes is not empty
            for i in indexes.flatten():
                x, y, w, h = boxes[i]
                label = str(classes[class_ids[i]])
                confidence = str(round(confidences[i], 2))
                color = colors[i]
                cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                cv2.putText(frame, label + " " + confidence, (x, y + 20), font, 2, (255, 255, 255), 2)

        cv2.imshow('Webcam Object Detection', frame)
        key = cv2.waitKey(1)

        if key == 27:  # Press 'Esc' key to exit
            break
        elif key == ord('s'):  # Press 's' key to stop object recognition
            break

except Exception as e:
    print(f"An error occurred: {e}")

finally:
    print("Escape hit, closing...")
    cv2.destroyAllWindows()
    picam2.stop()
    picam2.close()
